
import java.util.Random;
import static Utils.ActivationFunction.step;

public class Perceptrons {
    public int dimension;
    public double[] weight; //weight vector of perceptrons

    public Perceptrons(int dimension_of_input_data) {
        dimension = dimension_of_input_data;
        weight = new double[dimension];
    }

    /**
     * train the nodel
     * @param trainingDataInput
     * @param trainingDataOutput
     * @param learningRate
     * @return integer, id data is classified correctly return 1 otherwise return 0.
     */
    public int train(double[] trainingDataInput, int trainingDataOutput, double learningRate) {
        int classified = 0;
        double c = 0;
        //find if the data is classified correctly
        //sum up the formula (w * x * t)
        for (int i = 0; i <dimension; i++ ) {
            c += weight[i] * trainingDataInput[i] * trainingDataOutput;
        }
        if (c > 0) {
            //data is classified correctly
            classified = 1;
        }else{
            //this will execute al the first time calling training method to define weights,
            //and execute if c is less then zero to find new weights
            for (int i = 0; i < dimension; i++) {
                weight[i] = learningRate + trainingDataInput[i] * trainingDataOutput;
            }
        }
        //System.out.println(c + "   " + weight[0] + "   " + weight[1]);
        return classified;
    }

    private int predict(double[] testInputData) {
        double preAction = 0.0;
        for (int i = 0; i < dimension; i++) {
            preAction += weight[i] * testInputData[i];
        }
        return step(preAction);
    }

    public static void main(String[] args) {
        final int TRAIN_NUMBER = 1000; //number of training data.
        final int TEST_NUMBER = 200; // number of test data
        final int DIMENSION_OF_INPUT_DATA = 2;
        //input data for training
        double[][] trainInputData = new double[TRAIN_NUMBER][DIMENSION_OF_INPUT_DATA];
        //train labels
        int[] trainOutputData = new int[TRAIN_NUMBER];

        double[][] testInputData = new double[TEST_NUMBER][DIMENSION_OF_INPUT_DATA];
        int[] testOutputData = new int[TEST_NUMBER];
        //output od predicted data by the model
        int[] predictedData = new int[TEST_NUMBER];

        final int loopNumbers = 2000; // maximum training loopNumbers
        final double learningRate = 1.0; //learning rate can be one in this network

        // initialize input data
        //training set for each class will be generated by Gaussian :
        // class 1 : x1 around -2.0 with variance 1.0, y1: around +2.0 with variance 1.0
        // class 2 : x2 around +2.0 with variance 1.0, y2: around -2.0 with variance 1.0

        final Random RANDOM = new Random();
        Gaussian gaussian1 = new Gaussian(-2.0, 1, RANDOM);
        Gaussian gaussian2 = new Gaussian(2.0, 1, RANDOM);
        //training data for class
        for (int i = 0; i < TRAIN_NUMBER / 2 - 1; i ++) {
            trainInputData[i][0] = gaussian1.random();
            trainInputData[i][1] = gaussian2.random();
            trainOutputData[i] = 1;
        }
        //training data for class 2
        for (int i = TRAIN_NUMBER / 2; i < TRAIN_NUMBER; i ++) {
            trainInputData[i][0] = gaussian2.random();
            trainInputData[i][1] = gaussian1.random();
            trainOutputData[i] = -1;
        }

        //test Data for class 1
        for (int i = 0; i < TEST_NUMBER / 2 - 1; i++) {
            testInputData[i][0] = gaussian1.random();
            testInputData[i][1] = gaussian2.random();
            testOutputData[i] = 1;
        }

        //test Data for class 2
        for (int i = TEST_NUMBER / 2; i < TEST_NUMBER; i++) {
            testInputData[i][0] = gaussian2.random();
            testInputData[i][1] = gaussian1.random();
            testOutputData[i] = -1;
        }

        // construct a single layer neural network model
        int loopNumber = 0;
        Perceptrons classifier = new Perceptrons(DIMENSION_OF_INPUT_DATA);

        //training the model
        //to find the weight (Q1, Q2) where
        //for each x1,x2 in each row : x1*Q1 + x2*Q2 + learningRate > 0
        while (true) {
            int classified = 0;
            // sum up all returned value form training, if input row is classified correctly  training method return 1
            //otherwise return 0,  when all rows are classified correctly the number of classified rows will be equal
            //to the number of input training data.
            for (int i = 0; i < TRAIN_NUMBER; i++) {
                classified += classifier.train(trainInputData[i], trainOutputData[i], learningRate);
            }
            if (classified == TRAIN_NUMBER)
                break;
            loopNumber++;
            if (loopNumber == loopNumbers)
                break;
            //System.out.println(classified + "   " + TRAIN_NUMBER);
        }

        //testing
        for (int i = 0; i < TEST_NUMBER; i++) {
            predictedData[i] = classifier.predict(testInputData[i]);
        }

        //evaluation of the result of predicted data
        //create confusionMatrix
        int[][] confusionMatrix = new int[2][2];
        double accuracy = 0.0;
        double precision = 0.0;
        double recall = 0.0;

        for (int i = 0; i < TEST_NUMBER; i++) {
            if (predictedData[i] > 0 ) {
                if (testOutputData[i] > 0) {
                    accuracy++;
                    precision++;
                    recall++;
                    confusionMatrix[0][0] += 1;
                }else {
                    confusionMatrix[1][0] += 1;
                }
            }else {
                if (testOutputData[i] > 0 ) {
                    confusionMatrix[0][1] += 1;
                }else {
                    accuracy ++;
                    confusionMatrix[1][1] += 1;
                }
            }
        }

        accuracy /= TEST_NUMBER;
        precision /= confusionMatrix[0][0] + confusionMatrix[1][0];
        recall /= confusionMatrix[0][0] + confusionMatrix[0][1];
        System.out.println("*****************");
        System.out.println("Model Evaluation");
        System.out.printf("Accuracy: %.1f %%\n", accuracy * 100);
        System.out.printf("Precision: %.1f %%\n", precision * 100);
        System.out.printf("Recall: %.1f %%\n", recall * 100);
    }


}
